import logging
import validators
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler, CallbackQueryHandler, \
    ConversationHandler

from change_id import change_ids
from data import db_session
from config import TOKEN
from data.users import User
from data.websites import Website
import time
import hashlib
from urllib.request import urlopen, Request

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)

db_session.global_init('gt.db')
db_sess = db_session.create_session()


def string_resources(user: User) -> str:
    result = 'Tracking websites:\n--------------------------------------------------------\n'
    counter = 0
    for i in user.news:
        counter += 1
        result += f"""{counter}. {i.address}
--------------------------------------------------------
"""
    if not user.news:
        result += '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'
    return result


async def registration(update, context):
    # reply_keyboard = [['/auth'],
    #                   ['/sh'],
    #                   ['/cancel']]
    # markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    match db_sess.query(User).filter(User.id == update.effective_user.id).first():
        case None:
            user = User()
            user.id = update.effective_user.id
            user.state = 0
            db_sess.add(user)
            db_sess.commit()
            await update.message.reply_text('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        case _:
            await update.message.reply_text('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ')


async def add_website_str(update, context):
    await update.callback_query.edit_message_reply_markup()
    await context.bot.send_message(chat_id=update.effective_user.id,
                                   text="""–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–µ—Å—É—Ä—Å–∞:
(P.S. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ - /cancel)""")
    db_sess.query(User).filter(User.id == update.effective_user.id).first().state = 1
    db_sess.commit()
    return ADD


async def remove_website_str(update, context):
    await update.callback_query.edit_message_reply_markup()
    await context.bot.send_message(chat_id=update.effective_user.id,
                                   text="""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
(P.S. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ - /cancel)""")
    db_sess.query(User).filter(User.id == update.effective_user.id).first().state = 1
    db_sess.commit()
    return REMOVE


async def add_main(update, context):
    address = update.message.text.rstrip('/')
    if validators.url(address):
        if db_sess.query(Website).filter(Website.address == address,
                                         Website.user_id == update.effective_user.id).first():
            await update.message.reply_text("""–í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —ç—Ç–æ—Ç —Å–∞–π—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞
(P.S. –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∞–π—Ç - /cancel)""")
            return ADD
        else:
            website = Website()
            website.address = address
            website.user_id = update.effective_user.id
            url = Request(f'{address}',
                          headers={'User-Agent': 'Mozilla/5.0'})
            response = urlopen(url).read()
            website.version = hashlib.sha224(response).hexdigest()
            match address.split():
                case [*_, ".climbingcompetition.ru", _]:
                    website.climb = True
                case _:
                    website.climb = False
            db_sess.add(website)
            db_sess.commit()
            await update.message.reply_text('‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    else:
        await update.message.reply_text("""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞
(P.S. –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∞–π—Ç - /cancel)""")
        return ADD
    db_sess.query(User).filter(User.id == update.effective_user.id).first().state = 0
    db_sess.commit()
    return ConversationHandler.END


async def remove_main(update, context):
    user = db_sess.query(User).filter(User.id == update.effective_user.id).first()
    number = update.message.text
    if number.isnumeric():
        number = int(number)
        if 0 < number <= len(user.news):
            s = user.news[number - 1]
            db_sess.delete(s)
            db_sess.commit()
            await update.message.reply_text('‚úÖ–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
            change_ids(db_sess)
            user.state = 0
            db_sess.commit()
            return ConversationHandler.END
        else:
            await update.message.reply_text('üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
            return REMOVE
    else:
        await update.message.reply_text('üö´–ù–µ —á–∏—Å–ª–æ')
        return REMOVE


async def for_wtf(update, context):
    await context.bot.send_photo(update.effective_user.id, 'static/bear.jpg', caption="""–Ø - –±–æ—Çü¶æ, 
    –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π —Å–∞–π—Ç–æ–≤üïµüèΩ. –î–æ–±–∞–≤–ª—è–π —Å–∞–π—Ç—ã –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏ 
    –ø–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –ø–µ—Ä–≤—ã–º (-–æ–π). –ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: 
    /auth - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ 
    /sh - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ 
    /cancel - –æ—Ç–º–µ–Ω–∞ –∫–∞–∫–æ–π –ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ 
    –£–¥–∞—á–∏üòâ""")


async def cancel(update, context):
    user = db_sess.query(User).filter(User.id == update.effective_user.id).first()
    if user:
        match user.state:
            case 0:
                await context.bot.send_photo(update.effective_user.id, 'static/bear.jpg', caption="""–Ø - –±–æ—Çü¶æ, 
–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π —Å–∞–π—Ç–æ–≤üïµüèΩ. –î–æ–±–∞–≤–ª—è–π —Å–∞–π—Ç—ã –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏ 
–ø–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –ø–µ—Ä–≤—ã–º (-–æ–π). –ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: 
/auth - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ 
/sh - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ 
/cancel - –æ—Ç–º–µ–Ω–∞ –∫–∞–∫–æ–π –ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ 
–£–¥–∞—á–∏üòâ""")
            case 1:
                await update.message.reply_text('üîô–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
                db_sess.query(User).filter(User.id == update.effective_user.id).first().state = 0
                db_sess.commit()
                return ConversationHandler.END
    else:
        await update.message.reply_text('‚ùóÔ∏è–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º‚ùóÔ∏è')


async def he(update, context):
    await update.message.reply_text('—Ö—É–ª–∏ –µ–±–∞—Ç—å')


async def show_sites(update, context):
    user_from_db = db_sess.query(User).filter(User.id == update.effective_user.id).first()
    if user_from_db:
        user_from_db.state = 1
        db_sess.commit()
        result = string_resources(user_from_db)
        keybut = [[InlineKeyboardButton('add resource', callback_data='add')]]
        if user_from_db.news:
            keybut.append([InlineKeyboardButton('remove resource', callback_data='remove')])
        keyboard = InlineKeyboardMarkup(keybut)

        await update.message.reply_text(result, reply_markup=keyboard)
        return FOR_ALL
    else:
        await update.message.reply_text('‚ùóÔ∏è–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º‚ùóÔ∏è')


async def check_site_on_upd(context):
    for site in db_sess.query(Website).all():
        url = Request(f'{site.address}',
                      headers={'User-Agent': 'Mozilla/5.0'})
        response = urlopen(url).read()
        current_hash = hashlib.sha224(response).hexdigest()
        if site.version != current_hash:
            site.version = current_hash
            db_sess.commit()
            await context.bot.send_message(site.user_id, f'–ù–∞ —Å–∞–π—Ç–µ {site.address} –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è!')


FOR_ALL, ADD, REMOVE = range(3)


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('sh', show_sites)],
        states={
            FOR_ALL: [CallbackQueryHandler(add_website_str, pattern='add'),
                      CallbackQueryHandler(remove_website_str, pattern='remove'),
                      CommandHandler('cancel', cancel)],
            ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_main)],
            REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_main)]

        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('cancel', cancel))
    app.add_handler(CommandHandler('auth', registration))
    app.add_handler(MessageHandler(filters.TEXT, for_wtf))
    job = app.job_queue
    job.run_repeating(check_site_on_upd, interval=15)
    app.run_polling()


if __name__ == '__main__':
    main()
